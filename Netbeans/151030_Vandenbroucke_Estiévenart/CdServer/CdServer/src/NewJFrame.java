
import java.util.ArrayList;
import java.util.Calendar;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Arrays;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Nicolas
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();

        klok1 = new Clock();
        klok1.start();
        databank = new ArrayList<Cd>();
        cd1 = new Cd("BonJovi", "Prayer", "Rock");
        cd2 = new Cd("Ciline", "Everlasting", "Pop");
        cd3 = new Cd("Messhugah", "bleed", "TrashMetal");
        databank.add(cd1);
        databank.add(cd2);
        databank.add(cd3);
        for (Cd cd : databank) {
            bigField.append(cd.toString());
        }
        antwoord = new StringBuffer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tijdpaneel = new javax.swing.JPanel();
        digiclock = new javax.swing.JLabel();
        databankpaneel = new javax.swing.JPanel();
        name = new javax.swing.JLabel();
        genre = new javax.swing.JLabel();
        stock = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        genreField = new javax.swing.JTextField();
        stockField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        bigField = new javax.swing.JTextArea();
        addKnop = new javax.swing.JButton();
        saveKnop = new javax.swing.JButton();
        loadKnop = new javax.swing.JButton();
        zoekKnop = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        zoekField = new javax.swing.JTextField();
        startServerKnop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1106, 800));

        tijdpaneel.setPreferredSize(new java.awt.Dimension(1106, 60));

        digiclock.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        digiclock.setText("digitale clock");

        databankpaneel.setPreferredSize(new java.awt.Dimension(1106, 600));

        name.setText("name");

        genre.setText("genre");

        stock.setText("stock");

        bigField.setColumns(20);
        bigField.setRows(5);
        jScrollPane1.setViewportView(bigField);

        addKnop.setText("add");
        addKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addKnopActionPerformed(evt);
            }
        });

        saveKnop.setText("save");
        saveKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveKnopActionPerformed(evt);
            }
        });

        loadKnop.setText("Load");
        loadKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadKnopActionPerformed(evt);
            }
        });

        zoekKnop.setText("Zoek");
        zoekKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoekKnopActionPerformed(evt);
            }
        });

        jLabel1.setText("zoeken");

        zoekField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoekFieldActionPerformed(evt);
            }
        });

        startServerKnop.setBackground(new java.awt.Color(255, 0, 0));
        startServerKnop.setText("Start Server");
        startServerKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startServerKnopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout databankpaneelLayout = new javax.swing.GroupLayout(databankpaneel);
        databankpaneel.setLayout(databankpaneelLayout);
        databankpaneelLayout.setHorizontalGroup(
            databankpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databankpaneelLayout.createSequentialGroup()
                .addGroup(databankpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, databankpaneelLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(databankpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name)
                            .addComponent(genre)
                            .addComponent(stock)
                            .addComponent(jLabel1))
                        .addGap(21, 21, 21)
                        .addGroup(databankpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nameField)
                            .addComponent(genreField)
                            .addComponent(stockField, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                            .addComponent(zoekField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(databankpaneelLayout.createSequentialGroup()
                        .addContainerGap(56, Short.MAX_VALUE)
                        .addGroup(databankpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addKnop, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(zoekKnop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startServerKnop, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(databankpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loadKnop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveKnop, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
                        .addGap(130, 130, 130)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        databankpaneelLayout.setVerticalGroup(
            databankpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databankpaneelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(databankpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(databankpaneelLayout.createSequentialGroup()
                        .addGroup(databankpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(name)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(databankpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(genre)
                            .addComponent(genreField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(databankpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(stock)
                            .addComponent(stockField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(databankpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(zoekField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(databankpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addKnop, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(saveKnop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(databankpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loadKnop, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(zoekKnop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(startServerKnop, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tijdpaneelLayout = new javax.swing.GroupLayout(tijdpaneel);
        tijdpaneel.setLayout(tijdpaneelLayout);
        tijdpaneelLayout.setHorizontalGroup(
            tijdpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tijdpaneelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(digiclock, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(tijdpaneelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(databankpaneel, javax.swing.GroupLayout.DEFAULT_SIZE, 1148, Short.MAX_VALUE))
        );
        tijdpaneelLayout.setVerticalGroup(
            tijdpaneelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tijdpaneelLayout.createSequentialGroup()
                .addComponent(databankpaneel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(digiclock, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        getContentPane().add(tijdpaneel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addKnopActionPerformed
        // TODO add your handling code here:
        Cd nieuwCD = new Cd(nameField.getText(), genreField.getText(), stockField.getText());
        databank.add(nieuwCD);
        bigField.setText("");
        for (Cd cd : databank) {
            bigField.append(cd.toString());

        }

    }//GEN-LAST:event_addKnopActionPerformed

    private void saveKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveKnopActionPerformed
        try {
            BufferedWriter uit = new BufferedWriter(new FileWriter("cdlijst.txt"));
            for (Cd cd : databank) {

                uit.write(cd.toString());
                uit.newLine();
            }

            uit.close();
            /*  ObjectOutputStream uit = new ObjectOutputStream(new FileOutputStream("persoon.dat"));
             for (Cd cd: databank){
             String str = cd.toString();
             uit.write(str);
             }
            
             uit.close();*/
    }//GEN-LAST:event_saveKnopActionPerformed
        catch (IOException e) {
            System.out.println("IO-exceptie");
        }
    }
    private void loadKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadKnopActionPerformed
        String regel = "";
        String match = "-";
        BufferedReader in;
        databank.clear();
        bigField.setText("");

        // String[] cdMaker = new String[3];
        try {
            in = new BufferedReader(new FileReader("cdlijst.txt"));

            regel = in.readLine();
            while (regel != null) {
                System.out.println(regel);
                //StringBuffer s = new StringBuffer();
                //s.append("oke");
                //System.out.println(s.toString());
                String[] veld = regel.split(match);
                System.out.println(veld[0]);
                System.out.println(veld[1]);
                System.out.println(veld[2]);

                Cd cdX = new Cd(veld[0], veld[1], veld[2]);
                System.out.println(cdX.toString());
                databank.add(cdX);

                regel = in.readLine();
                regel = in.readLine();
            }

            for (Cd cd : databank) {
                bigField.append(cd.toString());
            }
        } catch (FileNotFoundException e) {
            System.out.println("kan het bestand niet vinden");
        } catch (IOException e) {
            System.out.println("Fout bij het lezen of sluiten van het bestand");
            e.printStackTrace();
        }

    }//GEN-LAST:event_loadKnopActionPerformed

    private void zoekKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoekKnopActionPerformed
        // TODO add your handling code here:
        String str = zoekField.getText();
        String match = "-";
        boolean gevonden = true;
        bigField.setText("");

        for (Cd cd : databank) {
            String art = cd.toString();
            String veld[] = art.split(match);
            art = veld[0];
            if (str.equals(art)) {
                bigField.append("Gevonden cd: " + cd.toString());
                antwoord.append("Gevonden cd: " + cd.toString());
                gevonden = false;
            }
        }
        if (gevonden) {
            bigField.setText("Geen resultaten gevoden");
        }
    }//GEN-LAST:event_zoekKnopActionPerformed

    private void zoekFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoekFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_zoekFieldActionPerformed

    private void startServerKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startServerKnopActionPerformed
        cdServer server = new cdServer();
        server.start();// TODO add your handling code here:
    }//GEN-LAST:event_startServerKnopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    //clock classe met thread
    class Clock extends Thread {

        //poging 2
        //declaraties
        private String time;
        private boolean cont;

        //run methode Clock
        public void run() {
            while (true) {
                Calendar cd = Calendar.getInstance();
                int hour = cd.get(Calendar.HOUR_OF_DAY);
                int minute = cd.get(Calendar.MINUTE);
                int second = cd.get(Calendar.SECOND);
                digiclock.setText(hour + ":" + minute + ":" + second);

            }
        }
    }

    public void zoeken(String teZoeken) {
        antwoord.delete(0, antwoord.length());

        String str = teZoeken;
        String match = "-";
        Boolean gevonden = true;
        bigField.setText("");

        for (Cd cd : databank) {
            String art = cd.toString();
            String veld[] = art.split(match);
            art = veld[0];
            if (str.equals(art)) {
                bigField.append("Gevonden cd: " + cd.toString());
                antwoord.append("Gevonden cd: " + cd.toString());
                gevonden = false;
            }
        }
        if (gevonden) {
            bigField.setText("Geen resultaten gevoden");
        }
    }

    public class cdServer extends Thread {

        ServerSocket serverSocket = null;
        boolean Listening = true;
        PrintWriter out = null;
        BufferedReader in = null;
        
        

        public void run() {
            
            try {
                serverSocket = new ServerSocket(4444);

            } catch (IOException e) {
                System.err.println("Could not listen on port 4444");
                bigField.setText("Could not listen on port 4444");
                System.exit(1);
            }
            System.out.println("Server is gestart op poort 4444");
            bigField.setText("server is gestart");
            
            Socket clientSocket = null;
            try {
                clientSocket = serverSocket.accept();
            } catch (IOException e) {
                System.err.println("Accept failed.");
                bigField.setText("Accept Failed");
                System.exit(1);
            }
            try{
            PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            
            

            String inputLine = "";
            boolean gedaan = false;

            while (((inputLine = in.readLine()) != null) && !gedaan) {
                bigField.append("De client zoekt: " + inputLine);
                zoeken(inputLine);
                out.println(antwoord.toString());
            }
            out.close();
            in.close();
            clientSocket.close();// verbreek de verbinding
            serverSocket.close();// stop de server
            }
            catch(IOException e){
                
            }
        }

    }

    public class Cd {

        private String artist, album, genre;

        public Cd(String artist, String album, String genre) {
            this.artist = artist;
            this.album = album;
            this.genre = genre;
        }

        public String toString() {
            StringBuffer aq = new StringBuffer();
            aq.append(artist + "-" + album + "-" + genre + "\n");
            String str = aq.toString();
            return str;
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addKnop;
    private javax.swing.JTextArea bigField;
    private javax.swing.JPanel databankpaneel;
    private javax.swing.JLabel digiclock;
    private javax.swing.JLabel genre;
    private javax.swing.JTextField genreField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadKnop;
    private javax.swing.JLabel name;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton saveKnop;
    private javax.swing.JButton startServerKnop;
    private javax.swing.JLabel stock;
    private javax.swing.JTextField stockField;
    private javax.swing.JPanel tijdpaneel;
    private javax.swing.JTextField zoekField;
    private javax.swing.JButton zoekKnop;
    // End of variables declaration//GEN-END:variables
private Clock klok1;
    private ArrayList<Cd> databank;
    private Cd cd1, cd2, cd3;
    private StringBuffer antwoord;

}
